#!/bin/bash

echo "üöÄ D√âPLOIEMENT COMPLET - TP S√©curit√© sur VPS OVH"
echo "=================================================="
echo ""

# Configuration
DOMAIN="astofinito.store"
EMAIL="your-email@example.com"  # CHANGEZ PAR VOTRE EMAIL AVANT D'EX√âCUTER

echo "üìã Configuration:"
echo "   - Domaine: $DOMAIN"
echo "   - VPS: 51.91.253.210"
echo "   - Email: $EMAIL"
echo ""

# V√©rification que l'email a √©t√© chang√©
if [ "$EMAIL" = "your-email@example.com" ]; then
    echo "‚ö†Ô∏è  ATTENTION: Changez l'email dans le script avant de continuer!"
    echo "   Modifiez la variable EMAIL ligne 8"
    exit 1
fi

echo "üéØ √âTAPE 1: Installation de Docker et des d√©pendances"
echo "===================================================="

# Installation Docker si n√©cessaire
if ! command -v docker &> /dev/null; then
    echo "üì¶ Installation de Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    echo "‚úÖ Docker install√©"
else
    echo "‚úÖ Docker d√©j√† install√©"
fi

# Installation Docker Compose si n√©cessaire
if ! command -v docker-compose &> /dev/null; then
    echo "üì¶ Installation de Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    echo "‚úÖ Docker Compose install√©"
else
    echo "‚úÖ Docker Compose d√©j√† install√©"
fi

# Installation des outils n√©cessaires
echo "üì¶ Installation des outils syst√®me..."
apt update
apt install -y curl dig certbot python3-certbot-nginx

echo ""
echo "üéØ √âTAPE 2: Configuration de l'application"
echo "==========================================="

# Cr√©ation du fichier .env
echo "üìù Cr√©ation du fichier .env..."
cat > .env << EOL
# Production Environment Variables
NODE_ENV=production
PORT=3000

# MongoDB Configuration
MONGO_USERNAME=admin
MONGO_PASSWORD=MongoSecure2025!
MONGODB_URI=mongodb://admin:MongoSecure2025!@mongodb:27017/tp_secu?authSource=admin
EOL

echo "‚úÖ Fichier .env cr√©√©"

# Build et d√©marrage des services (sans HTTPS pour commencer)
echo "üèóÔ∏è Build et d√©marrage des services..."
docker-compose down 2>/dev/null || true
docker-compose build --no-cache
docker-compose up -d

echo "‚è≥ Attente du d√©marrage des services (30s)..."
sleep 30

# V√©rification que l'application fonctionne
echo "üß™ Test de l'application..."
if curl -s http://localhost:3000/api/health > /dev/null; then
    echo "‚úÖ Application fonctionne"
else
    echo "‚ùå Application ne r√©pond pas, v√©rification des logs..."
    docker-compose logs nest-app
    echo "Voulez-vous continuer quand m√™me? (y/N)"
    read -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo ""
echo "üéØ √âTAPE 3: V√©rification DNS"
echo "============================"

# V√©rification DNS
echo "üîç V√©rification que le domaine pointe vers ce serveur..."
CURRENT_IP=$(curl -s ifconfig.me)
DOMAIN_IP=$(dig +short $DOMAIN)

echo "   - IP du serveur: $CURRENT_IP"
echo "   - IP du domaine: $DOMAIN_IP"

if [ "$CURRENT_IP" != "$DOMAIN_IP" ]; then
    echo "‚ùå ERREUR: Le domaine ne pointe pas vers ce serveur!"
    echo ""
    echo "üîß ACTIONS REQUISES:"
    echo "   1. Allez dans votre espace client OVH"
    echo "   2. Web Cloud > Noms de domaine > $DOMAIN"
    echo "   3. Zone DNS > Modifier l'enregistrement A"
    echo "   4. Pointez $DOMAIN vers $CURRENT_IP"
    echo "   5. Attendez 5-10 minutes et relancez ce script"
    echo ""
    exit 1
else
    echo "‚úÖ DNS correctement configur√©"
fi

echo ""
echo "üéØ √âTAPE 4: Configuration SSL Let's Encrypt"
echo "============================================"

# Arr√™t temporaire des services
echo "‚èπÔ∏è Arr√™t temporaire des services pour la configuration SSL..."
docker-compose down

# Configuration SSL avec le script d√©di√©
echo "üîê Configuration SSL automatique..."
# Modification temporaire de l'email dans le script SSL
sed -i "s/your-email@example.com/$EMAIL/" setup-ssl.sh

# Ex√©cution du script SSL
./setup-ssl.sh

if [ $? -eq 0 ]; then
    echo "‚úÖ SSL configur√© avec succ√®s"
else
    echo "‚ùå Erreur lors de la configuration SSL"
    exit 1
fi

echo ""
echo "üéØ √âTAPE 5: Tests finaux"
echo "========================"

echo "üß™ Tests de connectivit√©..."

# Test HTTP (doit rediriger vers HTTPS)
echo "   - Test redirection HTTP ‚Üí HTTPS..."
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$DOMAIN)
if [ "$HTTP_STATUS" = "301" ] || [ "$HTTP_STATUS" = "302" ]; then
    echo "   ‚úÖ Redirection HTTP ‚Üí HTTPS OK"
else
    echo "   ‚ö†Ô∏è Redirection HTTP: $HTTP_STATUS"
fi

# Test HTTPS
echo "   - Test HTTPS..."
if curl -s https://$DOMAIN/api/health > /dev/null; then
    echo "   ‚úÖ HTTPS fonctionne"
else
    echo "   ‚ùå HTTPS ne r√©pond pas"
fi

# Test API
echo "   - Test API..."
API_RESPONSE=$(curl -s https://$DOMAIN/api/health)
if [[ $API_RESPONSE == *"MongoDB"* ]]; then
    echo "   ‚úÖ API et base de donn√©es fonctionnent"
else
    echo "   ‚ö†Ô∏è R√©ponse API: $API_RESPONSE"
fi

echo ""
echo "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!"
echo "===================================="
echo ""
echo "üåç Votre application est accessible sur:"
echo "   - https://$DOMAIN"
echo "   - https://www.$DOMAIN"
echo ""
echo "üìä Statut des services:"
docker-compose ps
echo ""
echo "üîê Certificat SSL:"
echo "   - Valide pour 90 jours"
echo "   - Renouvellement automatique configur√©"
echo "   - Stock√© dans: /etc/letsencrypt/live/$DOMAIN/"
echo ""
echo "üõ†Ô∏è Commandes utiles:"
echo "   - Voir les logs: docker-compose logs -f"
echo "   - Red√©marrer: docker-compose restart"
echo "   - Mettre √† jour: git pull && docker-compose up -d --build"
echo "   - V√©rifier SSL: curl -I https://$DOMAIN"
echo ""
echo "‚úÖ Votre TP S√©curit√© est maintenant en ligne!" 